const Handlebars = require('handlebars');
const dd = require('../default-data');


const hbsMsgMenuSettingsEN = `
üõ† <b>Settings</b>

What do you want to change?

‚ö†Ô∏è Showing Telegram username is not recommended and is only available to experienced users due to possible fraud.

<b>Your username:</b> /u{{public_name}}.`;
const hbsMsgMenuSettingsRU = `
üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?

‚ö†Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Telegram –ª–æ–≥–∏–Ω–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤—è–∑–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º. 

<b>–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω:</b> /u{{public_name}}.`;
const msgMenuSettings = (ctx) => {
  const { i18n, session } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsRU;
      break;
  }
  const template = Handlebars.compile(hbsText);

  const public_name = session.user.public_name;
  return template({ public_name, });
}
module.exports.msgMenuSettings = msgMenuSettings;


const hbsMsgMenuSettingsCurrentCurrencyEN = `
üíµ <b>Currency</b>

Select a currency. This filter affects the viewing and creating adverts.

Currently ¬´<b>{{currency_code}}</b>¬ª is being used.`;
const hbsMsgMenuSettingsCurrentCurrencyRU = `
üíµ <b>–í–∞–ª—é—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É. –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.

–°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´<b>{{currency_code}}</b>¬ª.`;
const msgMenuSettingsCurrentCurrency = (ctx) => {
  const { i18n, session } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsCurrentCurrencyEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsCurrentCurrencyRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  const currency_code = session.user.currency;
  return template({ currency_code });
}
module.exports.msgMenuSettingsCurrentCurrency = msgMenuSettingsCurrentCurrency;



const hbsMsgMenuSettingsAboutCurrentCurrencyEN = hbsMsgMenuSettingsCurrentCurrencyEN + `

You can change it at any time in "Settings".`;
const hbsMsgMenuSettingsAboutCurrentCurrencyRU = hbsMsgMenuSettingsCurrentCurrencyRU + `

–í—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".`;
const msgMenuSettingsAboutCurrentCurrency = (ctx) => {
  const { i18n, session } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsAboutCurrentCurrencyEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsAboutCurrentCurrencyRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  const title = i18n.t('ikb.Settings.Currency');
  const currency_code = session.user.currency_code;
  return template({ title, currency_code });
}
module.exports.msgMenuSettingsAboutCurrentCurrency = msgMenuSettingsAboutCurrentCurrency;


const hbsMsgMenuSettingsLanguageEN = `
üåç <b>Language</b>

Choose the interface language. The change of language will not affect previously sent messages.`;
const hbsMsgMenuSettingsLanguageRU = `
üåç <b>–Ø–∑—ã–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`;
const msgMenuSettingsLanguage = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsLanguageEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsLanguageRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsLanguage = msgMenuSettingsLanguage;


const hbsMsgMenuSettingsPublicNameChangeEN = `
üë§ <b>Enter your Username</b>

ENG only and no more than 15 characters

‚ö†Ô∏è Attention! This action is irreversible. You will not be able to change it in the future.`;
const hbsMsgMenuSettingsPublicNameChangeRU = `
üë§ <b>–£–∫–∞–∂–∏—Ç–µ –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–¢–æ–ª—å–∫–æ ENG –∏ –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É–¥—É—â–µ–º.`;
const msgMenuSettingsPublicNameChange = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsPublicNameChangeEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsPublicNameChangeRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsPublicNameChange = msgMenuSettingsPublicNameChange;


const hbsMsgMenuSettingsPublicNameChangeQuestionEN = `
Are you sure you want to change Public name to {{public_name}}?`;
const hbsMsgMenuSettingsPublicNameChangeQuestionRU = `
–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {{public_name}}?`;
const msgMenuSettingsPublicNameChangeQuestion = (ctx, data = {}) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsPublicNameChangeQuestionEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsPublicNameChangeQuestionRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ public_name: data.public_name });
}
module.exports.msgMenuSettingsPublicNameChangeQuestion = msgMenuSettingsPublicNameChangeQuestion;


const hbsMsgMenuSettingsPublicNameChangeWrongEN = `
‚ö†Ô∏è Wrong public Username`;
const hbsMsgMenuSettingsPublicNameChangeWrongRU = `
‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω–æ–µ –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`;
const msgMenuSettingsPublicNameChangeWrong = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsPublicNameChangeWrongEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsPublicNameChangeWrongRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsPublicNameChangeWrong = msgMenuSettingsPublicNameChangeWrong;


const hbsMsgMenuSettingsPublicNameChangeSuccessfulEN = `
Public name has been successfully saved`;
const hbsMsgMenuSettingsPublicNameChangeSuccessfulRU = `
–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`;
const msgMenuSettingsPublicNameChangeSuccessful = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsPublicNameChangeSuccessfulEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsPublicNameChangeSuccessfulRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsPublicNameChangeSuccessful = msgMenuSettingsPublicNameChangeSuccessful;


const hbsMsgMenuSettingsRateEN = `
üìä <b>Rate {{market_currency}}</b>

Select the source of exchange rate of <b>{{pair}}</b> pair. Notice, that changes will impact on all your adverts with floating price.

Current source: {{source_name}}`;
const hbsMsgMenuSettingsRateRU = `
üìä <b>–ö—É—Ä—Å {{market_currency}}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –ø–∞—Ä—ã <b>{{pair}}</b>. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –≤–∞—à–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ü–µ–Ω–æ–π.

–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: {{source_name}}`;
const msgMenuSettingsRate = async (ctx) => {
  const { i18n, session, db } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsRateEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsRateRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  const base_currency = session.user.currency;
  const market_currency = 'BTC';
  const pair = `${market_currency}/${base_currency}`;
  const market_name = `${market_currency}_${base_currency}`;
  const source_id = (session.user.rate.get(market_name) === undefined)
    ? session.user.rate.get('DEFAULT')
    : session.user.rate.get(market_name);
  const source = await db.getRateSourceById(source_id);
  const source_name = source.name;
  return template({ market_currency, pair, source_name, });
}
module.exports.msgMenuSettingsRate = msgMenuSettingsRate;


const hbsMsgMenuSettingsFavoriteAddressesEN = `
‚≠êÔ∏è <b>Favorite addresses</b>

You can add your favorite wallet addresses for quick access when withdrawing funds!`;
const hbsMsgMenuSettingsFavoriteAddressesRU = `
‚≠êÔ∏è <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞</b>

–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤!`;
const msgMenuSettingsFavoriteAddresses = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsFavoriteAddressesEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsFavoriteAddressesRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsFavoriteAddresses = msgMenuSettingsFavoriteAddresses;


const hbsMsgMenuSettingsFavoriteAddressesAddEnterNameEN = `
Enter name for favorite address. No more than 10 characters`;
const hbsMsgMenuSettingsFavoriteAddressesAddEnterNameRU = `
–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞. –ù–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤`;
const msgMenuSettingsFavoriteAddressesAddEnterName = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsFavoriteAddressesAddEnterNameEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsFavoriteAddressesAddEnterNameRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsFavoriteAddressesAddEnterName = msgMenuSettingsFavoriteAddressesAddEnterName;


const hbsMsgMenuSettingsTimeZoneEN = `
üíµ <b>Time zone</b>

Select your Time zone. This setting affects notitications and date/time representation.

{{#if time_zone}}
Currently ¬´<b>{{time_zone}}</b>¬ª is being used.
{{/if}}`;
const hbsMsgMenuSettingsTimeZoneRU = `
üíµ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ.

{{#if time_zone}}
–°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´<b>{{time_zone}}</b>¬ª.
{{/if}}`;
const msgMenuSettingsTimeZone = (ctx) => {
  const { i18n, session } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsTimeZoneEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsTimeZoneRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  const time_zone = session.user.timezone;
  return template({ time_zone });
}
module.exports.msgMenuSettingsTimeZone = msgMenuSettingsTimeZone;


const hbsMsgMenuSettingsNotificationEN = `
üì≤ You can set up notifications for different events`;
const hbsMsgMenuSettingsNotificationRU = `
üì≤ –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–¥ —Å–µ–±—è`;
const msgMenuSettingsNotification = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      hbsText = hbsMsgMenuSettingsNotificationEN;
      break;
    case 'ru':
      hbsText = hbsMsgMenuSettingsNotificationRU;
      break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}
module.exports.msgMenuSettingsNotification = msgMenuSettingsNotification;


const hbsMsgMenuSettingsNotificationChangeModeTypeNewReferralEN = `
üîä Notifications of new referrals after the user has registered in the service by your referral link.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeNewReferralRU = `
üîä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeReferalPaymentEN = `
üîä Payout notifications after the user has completed a trade.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeReferalPaymentRU = `
üîä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ–ª —Å–¥–µ–ª–∫—É.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeFreeTradeEN = `
üîä Notification that your trade was free and the commission has returned to the balance.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeFreeTradeRU = `
üîä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∫–æ–º–∏—Å—Å–∏—è –≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–∞ –±–∞–ª–∞–Ω—Å.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeServiceMessageEN = `
ü§ñ Very rare, but sometimes {{company_name}} sends important messages to users, but we value the comfort of users more, so you can change the settings for receiving such messages.`;
const hbsMsgMenuSettingsNotificationChangeModeTypeServiceMessageRU = `
ü§ñ {{company_name}} –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, –Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–∂–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º—ã —Ü–µ–Ω–∏–º –±–æ–ª—å—à–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`;
const hbsMsgMenuSettingsNotificationChangeModeEN = `
{{type}}

Night time is from 11PM to 9AM according to your local time.

Mode:
<b>{{mode}}</b>`;
const hbsMsgMenuSettingsNotificationChangeModeRU = `
{{type}}

–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —ç—Ç–æ —Å 23 –¥–æ 9 –ø–æ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏

–†–µ–∂–∏–º:
<b>{{mode}}</b>`;
const msgMenuSettingsNotificationChangeMode = (ctx, params = { type }) => {
  const { i18n, session } = ctx;
  let hbsText = '';
  let type = '';
  switch (i18n.shortLanguageCode) {
    case 'en':
      switch (params.type) {
        case 'new_referral':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeNewReferralEN;
          break;
        case 'referal_payment':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeReferalPaymentEN;
          break;
        case 'free_trade':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeFreeTradeEN;
          break;
        case 'service_message':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeServiceMessageEN;
          break;
      }
      hbsText = hbsMsgMenuSettingsNotificationChangeModeEN;
      break;
    case 'ru':
      switch (params.type) {
        case 'new_referral':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeNewReferralRU;
          break;
        case 'referal_payment':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeReferalPaymentRU;
          break;
        case 'free_trade':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeFreeTradeRU;
          break;
        case 'service_message':
          type = hbsMsgMenuSettingsNotificationChangeModeTypeServiceMessageRU;
          break;
      }
      hbsText = hbsMsgMenuSettingsNotificationChangeModeRU;
      break;
  }
  let mode = '';
  const enabled = session.user.notification[params.type].enabled;
  const silent = session.user.notification[params.type].mode.silent;
  const night = session.user.notification[params.type].mode.night;
  if (enabled) {
    if (silent && night) {
      mode = `${i18n.t('ikb.Settings.Notifications.modes.Do not receive at night')}`;
      mode += `, ${i18n.t('ikb.Settings.Notifications.modes.Silent')}`;
    } else if (silent) {
      mode = `${i18n.t('ikb.Settings.Notifications.modes.Silent')}`;
    } else if (night) {
      mode = `${i18n.t('ikb.Settings.Notifications.modes.Do not receive at night')}`;
    } else
      mode = `${i18n.t('ikb.Settings.Notifications.modes.Enabled')}`;
  } else
    mode = `${i18n.t('ikb.Settings.Notifications.modes.Disabled')}`;

  const template = Handlebars.compile(hbsText);
  return template({
    type, mode,
    company_name: dd.company.name,
  });
}
module.exports.msgMenuSettingsNotificationChangeMode = msgMenuSettingsNotificationChangeMode;
