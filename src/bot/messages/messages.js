const Handlebars = require('handlebars');
const aboutMessages = require('./about');
const accountMessages = require('./account');
const affiliateMessages = require('./affiliate');
const settingsMessages = require('./settings');
const walletMessages = require('./wallet');
const settings = require('../../../settings');



const hbsMsgAgreeTermsOfServiceEN = `
Are you confirm that you read and agree <a href="{{law_documents_url}}">terms of service</a>?
Please click on the button below to confirm.
`;
const hbsMsgAgreeTermsOfServiceRU = `
–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å <a href="{{law_documents_url}}">—É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥</a>?
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
`;
const msgAgreeTermsOfService = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgAgreeTermsOfServiceEN; break;
    case 'ru': hbsText = hbsMsgAgreeTermsOfServiceRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ law_documents_url: '/terms', });
}


const hbsMsgNewReferalEN = `
You have got a new referal /u_{{public_name}}
`;
const hbsMsgNewReferalRU = `
–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª /u_{{public_name}}
`;
const msgNewReferal = (ctx, data) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgNewReferalEN; break;
    case 'ru': hbsText = hbsMsgNewReferalRU; break;
  }
  const template = Handlebars.compile(hbsText);
  const public_name = data.public_name;
  return template({ public_name });
}


const hbsMsgShortInfoEN = `
<b>{{bot_username}}</b>
`;
const hbsMsgShortInfoRU = `
<b>{{bot_username}}</b>
`;
const msgShortInfo = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  let bot_username = 'LeoPaysRoBot';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgShortInfoEN; break;
    case 'ru': hbsText = hbsMsgShortInfoRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({
    bot_username,
  });
}


const hbsMsgGreetingEN = `
<b>Hello, {{user_first_name}}!</b>

This telegram bot is a part of <a href="{{company_url}}">{{company_name}}</a>!
`;
const hbsMsgGreetingRU = `
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {{user_first_name}}!</b>

–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —á–∞—Å—Ç—å <a href="{{company_url}}">{{company_name}}</a>!
`;
const msgGreeting = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgGreetingEN; break;
    case 'ru': hbsText = hbsMsgGreetingRU; break;
  }
  const template = Handlebars.compile(hbsText);
  const user_first_name = ctx.chat.first_name;
  const company_name = 'LeoPays';
  const company_url = 'https://leopays.com/';
  return template({
    user_first_name,
    company_name, company_url,
  });
}


const hbsMsgWrongCommandEN = `
‚ö†Ô∏è <b>Attention, the wrong command was most likely entered!</b>
`;
const hbsMsgWrongCommandRU = `
‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!</b>
`;
const msgWrongCommand = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgWrongCommandEN; break;
    case 'ru': hbsText = hbsMsgWrongCommandRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgOhSorryEN = `
Oh, sorry üòï
`;
const hbsMsgOhSorryRU = `
–û–π, –∏–∑–≤–∏–Ω–∏—Ç–µ üòï
`;
const msgOhSorry = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgOhSorryEN; break;
    case 'ru': hbsText = hbsMsgOhSorryRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgCancelledEN = `
<b>Cancelled</b>
`;
const hbsMsgCancelledRU = `
<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>
`;
const msgCancelled = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgCancelledEN; break;
    case 'ru': hbsText = hbsMsgCancelledRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgMenuTransactionEN = `
<b>Done!</b>
Transaction: {{transaction_id}}
`;
const hbsMsgMenuTransactionRU = `
<b>–ì–æ—Ç–æ–≤–æ!</b>
–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {{transaction_id}}
`;
const msgMenuTransaction = (ctx, transaction) => {
  const { i18n } = ctx;
  const { explorer } = settings;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgMenuTransactionEN; break;
    case 'ru': hbsText = hbsMsgMenuTransactionRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...transaction, });
}


const hbsMsgMenuSelecAccountEN = `
<b>Select an account</b>
`;
const hbsMsgMenuSelecAccountRU = `
<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</b>
`;
const msgMenuSelecAccount = (ctx, transaction) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgMenuSelecAccountEN; break;
    case 'ru': hbsText = hbsMsgMenuSelecAccountRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSendingTheTransactionEN = `
Sending the transaction
`;
const hbsMsgSendingTheTransactionRU = `
–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
`;
const msgSendingTheTransaction = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSendingTheTransactionEN; break;
    case 'ru': hbsText = hbsMsgSendingTheTransactionRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectAccountForClaimRewardsEN = `
Select the account for which you want to claim rewards
`;
const hbsMsgSelectAccountForClaimRewardsRU = `
–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
`;
const msgSelectAccountForClaimRewards = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectAccountForClaimRewardsEN; break;
    case 'ru': hbsText = hbsMsgSelectAccountForClaimRewardsRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgErrorInTheAccountCreationEN = `
Error in the LeoPays account creation process
`;
const hbsMsgErrorInTheAccountCreationRU = `
–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ LeoPays
`;
const msgErrorInTheAccountCreation = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgErrorInTheAccountCreationEN; break;
    case 'ru': hbsText = hbsMsgErrorInTheAccountCreationRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgInvalidAccountNameEN = `
Invalid LeoPays account name
`;
const hbsMsgInvalidAccountNameRU = `
–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ LeoPays
`;
const msgInvalidAccountName = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgInvalidAccountNameEN; break;
    case 'ru': hbsText = hbsMsgInvalidAccountNameRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgAccountCreationStartedEN = `
Account creation started LeoPays account
`;
const hbsMsgAccountCreationStartedRU = `
–ó–∞–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ LeoPays
`;
const msgAccountCreationStarted = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgAccountCreationStartedEN; break;
    case 'ru': hbsText = hbsMsgAccountCreationStartedRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgThisAccountAlreadyTakenEN = `
This LeoPays account is already taken. Try another name.
`;
const hbsMsgThisAccountAlreadyTakenRU = `
–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç LeoPays —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.
`;
const msgThisAccountAlreadyTaken = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgThisAccountAlreadyTakenEN; break;
    case 'ru': hbsText = hbsMsgThisAccountAlreadyTakenRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectFromAccountToSendCoinsEN = `
Select the LeoPays account from which you want to send coins
`;
const hbsMsgSelectFromAccountToSendCoinsRU = `
–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç LeoPays —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
`;
const msgSelectFromAccountToSendCoins = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectFromAccountToSendCoinsEN; break;
    case 'ru': hbsText = hbsMsgSelectFromAccountToSendCoinsRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectToAccountToSendCoinsEN = `
Specify the LeoPays account to which you want to send coins
`;
const hbsMsgSelectToAccountToSendCoinsRU = `
–£–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç LeoPays –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
`;
const msgSelectToAccountToSendCoins = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectToAccountToSendCoinsEN; break;
    case 'ru': hbsText = hbsMsgSelectToAccountToSendCoinsRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSpecifyTheNumberOfLPCToSendEN = `
Specify the number of LPC you want to send by number.
`;
const hbsMsgSpecifyTheNumberOfLPCToSendRU = `
–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LPC –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
`;
const msgSpecifyTheNumberOfLPCToSend = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSpecifyTheNumberOfLPCToSendEN; break;
    case 'ru': hbsText = hbsMsgSpecifyTheNumberOfLPCToSendRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgAvailableToYouEN = `
Available to you
`;
const hbsMsgAvailableToYouRU = `
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ
`;
const msgAvailableToYou = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgAvailableToYouEN; break;
    case 'ru': hbsText = hbsMsgAvailableToYouRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgFillInTheMemoFieldEN = `
Fill in the "memo" field (English letters and numbers only) or click "Skip".
`;
const hbsMsgFillInTheMemoFieldRU = `
–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ "memo" (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".
`;
const msgFillInTheMemoField = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgFillInTheMemoFieldEN; break;
    case 'ru': hbsText = hbsMsgFillInTheMemoFieldRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectFromAccountToStakeEN = `
Select the LeoPays account you want to stake from
`;
const hbsMsgSelectFromAccountToStakeRU = `
–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç LeoPays —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å—Ç–µ–π–∫–æ–≤–∞—Ç—å
`;
const msgSelectFromAccountToStake = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectFromAccountToStakeEN; break;
    case 'ru': hbsText = hbsMsgSelectFromAccountToStakeRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSpecifyTheNumberOfLPCToStakeEN = `
Enter the number of LPC that you want to stake
`;
const hbsMsgSpecifyTheNumberOfLPCToStakeRU = `
–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LPC –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å—Ç–µ–π–∫–æ–≤–∞—Ç—å
`;
const msgSpecifyTheNumberOfLPCToStake = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSpecifyTheNumberOfLPCToStakeEN; break;
    case 'ru': hbsText = hbsMsgSpecifyTheNumberOfLPCToStakeRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectFromAccountToVoteEN = `
Select the LeoPays account from which you want to vote.
`;
const hbsMsgSelectFromAccountToVoteRU = `
–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç LeoPays —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.
`;
const msgSelectFromAccountToVote = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectFromAccountToVoteEN; break;
    case 'ru': hbsText = hbsMsgSelectFromAccountToVoteRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSelectProxyAccountToVoteEN = `
If you want to transfer your votes to control, then send a PROXY LeoPays account or click Skip.
`;
const hbsMsgSelectProxyAccountToVoteRU = `
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç LeoPays PROXY –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
`;
const msgSelectProxyAccountToVote = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectProxyAccountToVoteEN; break;
    case 'ru': hbsText = hbsMsgSelectProxyAccountToVoteRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgListBPAccountsToVoteEN = `
List the LeoPays accounts of those block producers for which you want to vote or select from the menu.
`;
const hbsMsgListBPAccountsToVoteRU = `
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ LeoPays –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –±–ª–æ–∫–æ–≤ –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é.
`;
const msgListBPAccountsToVote = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgListBPAccountsToVoteEN; break;
    case 'ru': hbsText = hbsMsgListBPAccountsToVoteRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgListOfBPEN = `
List of block producers
`;
const hbsMsgListOfBPRU = `
–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –±–ª–æ–∫–æ–≤
`;
const msgListOfBP = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgListOfBPEN; break;
    case 'ru': hbsText = hbsMsgListOfBPRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgNoMoreThanMaxBPEN = `
No more than 30 block producers
`;
const hbsMsgNoMoreThanMaxBPRU = `
–ù–µ –±–æ–ª–µ–µ 30 –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –±–ª–æ–∫–æ–≤
`;
const msgNoMoreThanMaxBP = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgNoMoreThanMaxBPEN; break;
    case 'ru': hbsText = hbsMsgNoMoreThanMaxBPRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgSpecifyTheNumberOfLPCToDeStakeEN = `
Indicate the number of LPC you want to proof with a number.
`;
const hbsMsgSpecifyTheNumberOfLPCToDeStakeRU = `
–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LPC –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—Ç–µ–π–∫–æ–≤–∞—Ç—å.
`;
const msgSpecifyTheNumberOfLPCToDeStake = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSpecifyTheNumberOfLPCToDeStakeEN; break;
    case 'ru': hbsText = hbsMsgSpecifyTheNumberOfLPCToDeStakeRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgUseTheseKeysToStartBlockProductionEN = `
Use these private and public keys with account {{account}} to start block production in lepays-node.
`;
const hbsMsgUseTheseKeysToStartBlockProductionRU = `
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {{account}} –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤ –≤ lepays-node.
`;
const msgUseTheseKeysToStartBlockProduction = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgUseTheseKeysToStartBlockProductionEN; break;
    case 'ru': hbsText = hbsMsgUseTheseKeysToStartBlockProductionRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


const hbsMsgSendTheAddressOfYourNodeEN = `
<b>Please send the address of your LeoPays node.</b>
Example: https://node.testnet.leopays.dev
`;
const hbsMsgSendTheAddressOfYourNodeRU = `
<b>–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —É–∑–ª–∞ —Å–µ—Ç–∏ LeoPays.</b>
–ü—Ä–∏–º–µ—Ä: https://node.testnet.leopays.dev
`;
const msgSendTheAddressOfYourNode = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSendTheAddressOfYourNodeEN; break;
    case 'ru': hbsText = hbsMsgSendTheAddressOfYourNodeRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


const hbsMsgSendTheYourCountryCodeEN = `
<b>Please send your country code.</b>
According to ISO 3166, https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
Example for Russia: 643
`;
const hbsMsgSendTheYourCountryCodeRU = `
<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.</b>
–°–æ–≥–ª–∞—Å–Ω–æ ISO 3166, https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
–ü—Ä–∏–º–µ—Ä –¥–ª—è –†–æ—Å—Å–∏–∏: 643
`;
const msgSendTheYourCountryCode = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSendTheYourCountryCodeEN; break;
    case 'ru': hbsText = hbsMsgSendTheYourCountryCodeRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


const hbsMsgSelectTheFromAccountToWithdrawFromRefundEN = `
Select the LeoPays account from which you want to withdraw funds from the refund.
`;
const hbsMsgSelectTheFromAccountToWithdrawFromRefundRU = `
–í—ã–±–µ—Ä–∏—Ç–µ LeoPays –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞.
`;
const msgSelectTheFromAccountToWithdrawFromRefund = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgSelectTheFromAccountToWithdrawFromRefundEN; break;
    case 'ru': hbsText = hbsMsgSelectTheFromAccountToWithdrawFromRefundRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


const hbsMsgTooEarlyEN = `
<b>Too early!</b>
`;
const hbsMsgTooEarlyRU = `
<b>–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ!</b>
`;
const msgTooEarly = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgTooEarlyEN; break;
    case 'ru': hbsText = hbsMsgTooEarlyRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


const hbsMsgFundsWillBeAvailableNoEarlierThanEN = `
Funds will be available no earlier than
`;
const hbsMsgFundsWillBeAvailableNoEarlierThanRU = `
–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ —Ä–∞–Ω–µ–µ
`;
const msgFundsWillBeAvailableNoEarlierThan = (ctx, params = { account: '' }) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgFundsWillBeAvailableNoEarlierThanEN; break;
    case 'ru': hbsText = hbsMsgFundsWillBeAvailableNoEarlierThanRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({ ...params });
}


module.exports = {
  msgFundsWillBeAvailableNoEarlierThan,
  msgTooEarly,
  msgSelectTheFromAccountToWithdrawFromRefund,
  msgSendTheYourCountryCode,
  msgSendTheAddressOfYourNode,
  msgUseTheseKeysToStartBlockProduction,
  msgSpecifyTheNumberOfLPCToDeStake,
  msgNoMoreThanMaxBP,
  msgListOfBP,
  msgListBPAccountsToVote,
  msgSelectProxyAccountToVote,
  msgSelectFromAccountToVote,
  msgSpecifyTheNumberOfLPCToStake,
  msgSelectFromAccountToStake,
  msgFillInTheMemoField,
  msgAvailableToYou,
  msgSpecifyTheNumberOfLPCToSend,
  msgSelectToAccountToSendCoins,
  msgSelectFromAccountToSendCoins,
  msgThisAccountAlreadyTaken,
  msgAccountCreationStarted,
  msgInvalidAccountName,
  msgErrorInTheAccountCreation,
  msgSelectAccountForClaimRewards,
  msgSendingTheTransaction,
  msgMenuSelecAccount,
  msgMenuTransaction,
  msgAgreeTermsOfService,
  msgNewReferal,
  msgShortInfo,
  msgGreeting,
  msgWrongCommand,
  msgOhSorry,
  msgCancelled,
  ...aboutMessages,
  ...accountMessages,
  ...affiliateMessages,
  ...settingsMessages,
  ...walletMessages,
};
