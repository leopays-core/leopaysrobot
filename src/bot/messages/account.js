const Handlebars = require('handlebars');
const settings = require('../../../settings');



const hbsMsgMenuAccountsEN = `
List of your accounts.
`;
const hbsMsgMenuAccountsRU = `
–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
`;
const msgMenuAccounts = (ctx) => {
  const { i18n } = ctx;
  const { company } = settings;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgMenuAccountsEN; break;
    case 'ru': hbsText = hbsMsgMenuAccountsRU; break;
  }
  const template = Handlebars.compile(hbsText);
  const company_url = company.url;
  const company_name = company.name;
  return template({
    company_url, company_name,
  });
}


const hbsMenuAccountCreateEN = `
üëá <b>Enter your new account name</b>
The account name must be 12 characters long (short names are played at the auction).
Use only uppercase English characters from the set 'a-z1-5'.
`;
const hbsMenuAccountCreateRU = `
üëá <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>
–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã.
–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Ä–æ–≤–Ω—è—Ç—å—Å—è 12 —Å–∏–º–≤–æ–ª–∞–º (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ).
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ 'a-z1-5'.
`;
const msgMenuAccountCreate = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMenuAccountCreateEN; break;
    case 'ru': hbsText = hbsMenuAccountCreateRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}


const hbsMsgMenuAccountEN = `
{{#if privileged}}üëë{{else}}üë§{{/if}} /a_{{accountName}}

<b>Creator</b>: /a_{{creator}}

<b>Resources</b>:
<b>RAM</b>: usage: {{ram_usage}} / quota:{{ram_quota}} Bytes
<b>NET</b>: used: {{net_limit.used}} / available: {{cpu_limit.available}} / max: {{cpu_limit.max}} Bytes
<b>CPU</b>: used: {{cpu_limit.used}} / available: {{cpu_limit.available}} / max: {{cpu_limit.max}} ¬µs

{{#if voter_info}}
{{#if voter_info.is_proxy}}‚úÖ{{else}}‚òëÔ∏è{{/if}} <b>Proxy</b>
{{#if voter_info.proxy}}<b>Proxied to</b>: {{voter_info.proxy}}{{/if}}
{{/if}}
{{#if prodInfo}}{{#if prodInfo.is_active}}‚úÖ{{else}}‚òëÔ∏è{{/if}} <b>Block producer</b>{{/if}}
`;
const hbsMsgMenuAccountRU = `
{{#if privileged}}üëë{{else}}üë§{{/if}} /a_{{accountName}}

<b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>: /a_{{creator}}

<b>–†–µ—Å—É—Ä—Å—ã</b>:
<b>RAM</b>: usage: {{ram_usage}} / quota:{{ram_quota}} Bytes
<b>NET</b>: used: {{net_limit.used}} / available: {{cpu_limit.available}} / max: {{cpu_limit.max}} Bytes
<b>CPU</b>: used: {{cpu_limit.used}} / available: {{cpu_limit.available}} / max: {{cpu_limit.max}} ¬µs

{{#if voter_info}}
{{#if voter_info.is_proxy}}‚úÖ{{else}}‚òëÔ∏è{{/if}} <b>Proxy</b>
{{#if voter_info.proxy}}<b>Proxied to</b>: {{voter_info.proxy}}{{/if}}
{{/if}}
{{#if prodInfo}}{{#if prodInfo.is_active}}‚úÖ{{else}}‚òëÔ∏è{{/if}} <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –±–ª–æ–∫–æ–≤</b>{{/if}}
`;
const msgMenuAccount = (ctx, account, accInfo, prodInfo) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgMenuAccountEN; break;
    case 'ru': hbsText = hbsMsgMenuAccountRU; break;
  }
  const template = Handlebars.compile(hbsText);
  let accountName = account;
  if (accountName.includes('.')) accountName = accountName.replace('.', '_');
  if (accInfo.creator.includes('.')) accInfo.creator = accInfo.creator.replace('.', '_');
  return template({
    ...accInfo, prodInfo, accountName,
  });
}


const hbsMsgMenuAccountSendPubKeyEN = `
<b>Send your LeoPays Public Key.</b>
LPC...
`;
const hbsMsgMenuAccountSendPubKeyRU = `
<b>–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á LeoPays.</b>
LPC...
`;
const msgMenuAccountSendPubKey = (ctx) => {
  const { i18n } = ctx;
  let hbsText = '';
  switch (i18n.shortLanguageCode) {
    case 'en': hbsText = hbsMsgMenuAccountSendPubKeyEN; break;
    case 'ru': hbsText = hbsMsgMenuAccountSendPubKeyRU; break;
  }
  const template = Handlebars.compile(hbsText);
  return template({});
}

module.exports = {
  msgMenuAccounts,
  msgMenuAccountCreate,
  msgMenuAccount,
  msgMenuAccountSendPubKey,
};
